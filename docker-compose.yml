services:
  service_a:
    build: ./services/service_a
    container_name: service_a
    ports:
      - "5001:5000"
    environment:
      - SERVICE_NAME=User Service
      - SERVICE_ID=user_service
    command: python app.py
    networks:
      - monitoring_net
    restart: always

  service_b:
    build: ./services/service_b
    container_name: service_b
    ports:
      - "5002:5000"
    environment:
      - SERVICE_NAME=Order Service
      - SERVICE_ID=order_service
    command: python app.py
    networks:
      - monitoring_net
    restart: always

  service_c:
    build: ./services/service_c
    container_name: service_c
    ports:
      - "5003:5000"
    environment:
      - SERVICE_NAME=Inventory Service
      - SERVICE_ID=inventory_service
    command: python app.py
    networks:
      - monitoring_net
    restart: always

  service_d:
    build: ./services/service_d
    container_name: service_d
    ports:
      - "5004:5000"
    environment:
      - SERVICE_NAME=Notification Service
      - SERVICE_ID=notification_service
    command: python app.py
    networks:
      - monitoring_net
    restart: always

  monitoring:
    build: .
    container_name: monitoring
    ports:
      - "5010:5000"
    command: python scripts/run_monitoring.py
    networks:
      - monitoring_net
    restart: always
    volumes:
      - ./data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring_net
    restart: always

  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    networks:
      - monitoring_net
    ports:
      - "9100:9100"
    restart: always

networks:
  monitoring_net:
    driver: bridge 